pragma solidity ^0.4.4;

contract Bet {

  // Parameters for a bet
  mapping(address => uint) gamblers; // Set of people who have placed a bet
  address originator; 
  address winner;
  uint betStart;
  uint betDuration; 
  uint numGamblers; 
  uint pot; // Total amount of ETH in the bet

  // States
  bool ended; // Set to true at the end, disallows any change

  // Events that will be fired on changes.
  // Not totally sure what these do.
  event Deposited(address _from, uint _amount);  // so you can log these events
  event BetEnded(address winner, uint amount);

  function Bet(uint _betDuration, address _originator) {
    betStart = now;
    betDuration = _betDuration;
    originator = _originator;
  }

  function placeBet() payable returns (bool) {
    // Check that this bet is still taking bets
    require(now <= (betStart + betDuration)); // Not calling this prematurely
    require(!ended);

    gamblers[msg.sender] = msg.value;
    numGamblers++;
    pot += msg.value;
    Deposited(msg.sender, msg.value);
    return true;
  }

  function betEnd() returns (bool) {
    // Check that this bet hasn't already ended 
    require(now >= (betStart + betDuration)); // Not calling this prematurely
    require(!ended); // Hasn't already ended

    // Need logic for deciding who the winner is
    winner = originator;

    ended = true;
    BetEnded(winner, pot);
    winner.transfer(pot);

    return true;
  }

}